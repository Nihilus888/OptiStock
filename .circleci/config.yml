version: 2.1

commands:
  setup-python:
    steps:
      - run:
          name: Upgrade pip
          command: python -m pip install --upgrade pip

  install-python-dependencies:
    steps:
      - run:
          name: Install Python Dependencies
          command: pip install --default-timeout=100 --use-deprecated=legacy-resolver -r requirements.txt

  wait-for-postgres:
    steps:
      - run:
          name: Wait for PostgreSQL
          command: |
            echo "Waiting for PostgreSQL to start..."
            for i in {30..0}; do
              if pg_isready -h localhost -p 5432; then
                echo "PostgreSQL is up!"
                break
              fi
              echo "PostgreSQL is unavailable - waiting..."
              sleep 1
            done

jobs:
  build:
    docker:
      - image: circleci/python:3.10-node  # Backend image
      - image: circleci/postgres:latest
        environment:
          POSTGRES_DB: $DATABASE_NAME
          POSTGRES_USER: $DATABASE_USER
          POSTGRES_PASSWORD: $DATABASE_PASSWORD
    steps:
      - checkout
      - setup-python
      - restore_cache:
          keys:
            - v1-pip-cache-{{ checksum "requirements.txt" }}
      - install-python-dependencies
      - save_cache:
          paths:
            - ~/.cache/pip
          key: v1-pip-cache-{{ checksum "requirements.txt" }}
      - wait-for-postgres
      # Removed the database migration step
      # - run:
      #     name: Migrate Database
      #     command: python manage.py migrate

  test:
    docker:
      - image: circleci/python:3.10-node  # Backend image
      - image: circleci/postgres:latest
      #  environment:
        #  POSTGRES_DB: $DATABASE_NAME
        #  POSTGRES_USER: $DATABASE_USER
        #  POSTGRES_PASSWORD: $DATABASE_PASSWORD
    steps:
      - checkout
      - setup-python
      - restore_cache:
          keys:
            - v1-pip-cache-{{ checksum "requirements.txt" }}
      - wait-for-postgres
      - install-python-dependencies
      - run:
          name: Run Django Tests
          command: python manage.py test
      - run:
          name: Check Node.js and npm Versions
          command: |
            echo "Checking Node.js version..."
            node -v
            echo "Checking npm version..."
            npm -v
      - run:
          name: Install Node.js Dependencies
          command: |
            cd portfolioOptimizer
            npm install
      - run:
          name: Run Frontend Tests
          command: |
            cd portfolioOptimizer
            npm test -- --watchAll=false

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
